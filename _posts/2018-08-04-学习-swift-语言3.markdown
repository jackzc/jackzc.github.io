---
layout: post
title: 组件化远程私有库创建
date: 2019-05-09 00:00:00 +0300
description: 一步一步创建远程私有库、更新私有库
img: apple_swift.jpg # Add image post (optional)
tags: [iOS组件化] # add tag
---

### 一、创建私有库

##### 1.创建私有索引库
首先在gitlab上先创建一个仓库SpecName获取仓库地址 http://xxxxxx/SpecName.git 。
然后通过命令 pod repo add SpecName http://xxxxxx/SpecName.git 创建一个本地索引库，可在终端通过pod repo查看，或者直接查看目录~/.cocoapods/repos/master/Specs。

##### 2.创建私有库

```ruby
   Pod::Spec.new do |s|
    s.name          = 'XXXX' #项目名
    s.version       = '0.1.0' #相应的版本号
    s.summary       = 'A short description of XXXX.' #简述
    s.description   = <<‐ DESC #详细描述
    TODO: Add long description of the pod here.
                      DESC
    s.homepage      = 'https://github.com/XXXX/XXXX' #项目主页
    s.license       = { :type => 'MIT', :file => 'LICENSE' } #开源协议
    s.author        = { 'XXXX' => 'xxxxxx@xxx.com' } #作者
    s.platform      = :ios, '8.0' #支持的平台
    s.requires_arc  = true #arc和mrc选项
    s.libraries     = 'z', 'sqlite3' #表示依赖的系统类库，比如libz.dylib等
    s.frameworks    = 'UIKit','AVFoundation' #表示依赖系统的框架
    s.ios.vendored_frameworks = 'Base/Base.framework' # 依赖的第三方/自己的framework
    s.vendored_libraries = 'Library/Classes/libWeChatSDK.a' #表示依赖第三方/自己的静态库（比如libWeChatSDK.a）
    #依赖的第三方的或者自己的静态库文件必须以lib为前缀进行命名，否则会出现找不到的情况，这一点非常重要

    #平台信息
    s.platform      = :ios, '7.0'
    s.ios.deployment_target = '7.0'

    #文件配置项
    s.source        = { :git => 'https://github.com/XXXX/xxxx.git', :tag => s.version.to_s }
    #配置项目的目标路径，如果不是本地开发，pod init/update会从这个路去拉去代码

    s.source_files = 'XXXXX/Classes/**/*' #你的源码位置
    s.resources     = ['XXXXX/Assets/*'] #资源，比如图片，音频文件等
    s.public_header_files = 'XXXXX/Classes/XXXXX.h'   #需要对外开放的头文件

    #依赖的项目内容 可以多个
    s.dependency 'MJExtension'
    s.dependency 'AFNetworking'
end

```

首先pod lib create xxx,根据cocoapods提供的模板创建一个本地私有库，根据提示完成创建。
然后修改xxx.podspec文件，参考上面例子。
最后提交代码到远程仓库

```ruby
   #将本地代码加入本地仓库里
   git add .

   #提交修改到本地仓库
   git commit -m '你的修改记录'
   
   #查看当前的远程连接
   git remote 

   #添加名称为origin的远程连接
   git remote add origin '你的github项目地址'
   
   #在push之前，查看spec是否配置有问题
   pod lib lint

   #验证远程spec文件是否有误
   pod spec lint

   #推送master分支的代码到名称为origin的远程仓库
   git push origin master

```
 
注:

     * 正常情况下本地验证一般没问题, 远程验证正常情况下会有问题
     * 本地验证不会验证s.source后面的tag
     * 远程验证会验证tag, 而至此我们的tag还没有设置, 所以验证不会通过, 需要打标签
     * 设置好tag, 再次验证应该就是没问题的了

##### 3.tag对应库的版本号标签设置

```ruby
  #查看当前的tag值
  git tag

  #设置tag值
  git tag "0.0.1"

  #上传提交tag
  git push --tags

  #删除标签相关命令
  #先删除本地再删除远程标签，删除后需要重新打标签

  #删除本地标签
  git tag -d 0.0.1
  #删除远程标签
  git push origin :0.0.1
```

##### 4.提交私有库到私有索引库中

```ruby
   pod repo push SpecName xxx.podspec
```

##### 5.检验私有库是否成功

通过命令pod search xxx 查看是否能查看，如果失败在终端输入：rm ~/Library/Caches/CocoaPods/search_index.json 删除成功后，再执行pod search。

### 二、更新私有库

1.更新代码，更新测试工程的Podfile文件：pod update —no-repo-update 测试通过
2.更新xxx.podspec文件的配置信息，版本号一定要改
3.提交代码到远程仓库： git push origin master
4.更新tag标签： git push —tags
5.更新远程和本地的私有索引库： pod repo push SpecName xxx.podspec

### 三、配置Git

配置全局的用户名和邮箱
```ruby
    git config --global user.name  "github’s Name"
    git config --global user.email "github@xx.com"
```

在项目根目录下，对项目单独配置
```ruby
    git config user.name "gitlab’s Name"
    git config user.email "gitlab@xx.com"
```

查看当前配置
```ruby
    git config --list
```
